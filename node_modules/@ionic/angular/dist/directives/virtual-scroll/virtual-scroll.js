import { ChangeDetectorRef, ContentChild, Directive, ElementRef } from '@angular/core';
import { proxyInputs } from '../proxies';
import { VirtualItem } from './virtual-item';
import { VirtualHeader } from './virtual-header';
import { VirtualFooter } from './virtual-footer';
var VirtualScroll = /** @class */ (function () {
    function VirtualScroll(el, cd) {
        this.el = el;
        this.cd = cd;
        el.nativeElement.nodeRender = this.nodeRender.bind(this);
        proxyInputs(this, this.el, [
            'approxItemHeight',
            'approxHeaderHeight',
            'approxFooterHeight',
            'headerFn',
            'footerFn',
            'items',
            'itemHeight'
        ]);
    }
    VirtualScroll.prototype.nodeRender = function (el, cell, index) {
        if (!el) {
            var view = this.itmTmp.viewContainer.createEmbeddedView(this.getComponent(cell.type), { $implicit: null, index: index }, index);
            el = getElement(view);
            el['$ionView'] = view;
        }
        var node = el['$ionView'];
        var ctx = node.context;
        ctx.$implicit = cell.value;
        ctx.index = cell.index;
        node.detectChanges();
        return el;
    };
    VirtualScroll.prototype.getComponent = function (type) {
        switch (type) {
            case 0: return this.itmTmp.templateRef;
            case 1: return this.hdrTmp.templateRef;
            case 2: return this.ftrTmp.templateRef;
        }
        throw new Error('template for virtual item was not provided');
    };
    VirtualScroll.decorators = [
        { type: Directive, args: [{
                    selector: 'ion-virtual-scroll',
                    inputs: [
                        'approxItemHeight',
                        'approxHeaderHeight',
                        'approxFooterHeight',
                        'headerFn',
                        'footerFn',
                        'items',
                        'itemHeight'
                    ]
                },] },
    ];
    /** @nocollapse */
    VirtualScroll.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    VirtualScroll.propDecorators = {
        itmTmp: [{ type: ContentChild, args: [VirtualItem,] }],
        hdrTmp: [{ type: ContentChild, args: [VirtualHeader,] }],
        ftrTmp: [{ type: ContentChild, args: [VirtualFooter,] }]
    };
    return VirtualScroll;
}());
export { VirtualScroll };
function getElement(view) {
    var rootNodes = view.rootNodes;
    for (var i = 0; i < rootNodes.length; i++) {
        if (rootNodes[i].nodeType === 1) {
            return rootNodes[i];
        }
    }
    return null;
}
