import { Directive, ElementRef, HostListener } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { setIonicClasses } from './util/set-ionic-classes';
var TextValueAccessor = /** @class */ (function () {
    function TextValueAccessor(element) {
        this.element = element;
        this.onChange = function () { };
        this.onTouched = function () { };
    }
    TextValueAccessor.prototype.writeValue = function (value) {
        var _this = this;
        this.element.nativeElement.value = value;
        requestAnimationFrame(function () {
            setIonicClasses(_this.element);
        });
    };
    TextValueAccessor.prototype._handleInputEvent = function (value) {
        var _this = this;
        this.onChange(value);
        requestAnimationFrame(function () {
            setIonicClasses(_this.element);
        });
    };
    TextValueAccessor.prototype._handleBlurEvent = function () {
        var _this = this;
        this.onTouched();
        requestAnimationFrame(function () {
            setIonicClasses(_this.element);
        });
    };
    TextValueAccessor.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    TextValueAccessor.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    TextValueAccessor.prototype.setDisabledState = function (isDisabled) {
        this.element.nativeElement.disabled = isDisabled;
    };
    TextValueAccessor.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'ion-input:not([type=number]),ion-textarea,ion-searchbar',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: TextValueAccessor,
                            multi: true
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    TextValueAccessor.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    TextValueAccessor.propDecorators = {
        _handleInputEvent: [{ type: HostListener, args: ['input', ['$event.target.value'],] }],
        _handleBlurEvent: [{ type: HostListener, args: ['ionBlur',] }]
    };
    return TextValueAccessor;
}());
export { TextValueAccessor };
