import { Directive, ElementRef, HostListener } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { setIonicClasses } from './util/set-ionic-classes';
var NumericValueAccessor = /** @class */ (function () {
    function NumericValueAccessor(element) {
        this.element = element;
        this.onChange = function () { };
        this.onTouched = function () { };
    }
    NumericValueAccessor.prototype.writeValue = function (value) {
        // The value needs to be normalized for IE9, otherwise it is set to 'null' when null
        // Probably not an issue for us, but it doesn't really cost anything either
        this.element.nativeElement.value = value == null ? '' : value;
        setIonicClasses(this.element);
    };
    NumericValueAccessor.prototype._handleInputEvent = function (value) {
        var _this = this;
        this.onChange(value);
        requestAnimationFrame(function () {
            setIonicClasses(_this.element);
        });
    };
    NumericValueAccessor.prototype._handleBlurEvent = function () {
        var _this = this;
        this.onTouched();
        requestAnimationFrame(function () {
            setIonicClasses(_this.element);
        });
    };
    NumericValueAccessor.prototype.registerOnChange = function (fn) {
        this.onChange = function (value) {
            fn(value === '' ? null : parseFloat(value));
        };
    };
    NumericValueAccessor.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    NumericValueAccessor.prototype.setDisabledState = function (isDisabled) {
        this.element.nativeElement.disabled = isDisabled;
    };
    NumericValueAccessor.decorators = [
        { type: Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'ion-input[type=number]',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: NumericValueAccessor,
                            multi: true
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    NumericValueAccessor.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    NumericValueAccessor.propDecorators = {
        _handleInputEvent: [{ type: HostListener, args: ['input', ['$event.target.value'],] }],
        _handleBlurEvent: [{ type: HostListener, args: ['ionBlur',] }]
    };
    return NumericValueAccessor;
}());
export { NumericValueAccessor };
