import { Attribute, ChangeDetectorRef, ComponentFactoryResolver, Directive, ElementRef, EventEmitter, Input, Optional, Output, ViewContainerRef } from '@angular/core';
import { ActivatedRoute, ChildrenOutletContexts, PRIMARY_OUTLET, Router } from '@angular/router';
import { StackController } from './router-controller';
import { NavController } from '../../providers/nav-controller';
import { bindLifecycleEvents } from '../../providers/angular-delegate';
var IonRouterOutlet = /** @class */ (function () {
    function IonRouterOutlet(parentContexts, location, resolver, elementRef, name, stack, changeDetector, navCtrl, router) {
        this.parentContexts = parentContexts;
        this.location = location;
        this.resolver = resolver;
        this.elementRef = elementRef;
        this.changeDetector = changeDetector;
        this.navCtrl = navCtrl;
        this.activated = null;
        this.activatedView = null;
        this._activatedRoute = null;
        this.activateEvents = new EventEmitter();
        this.deactivateEvents = new EventEmitter();
        this.name = name || PRIMARY_OUTLET;
        parentContexts.onChildOutletCreated(this.name, this);
        var hasStack = stack !== 'false' && stack !== false;
        this.stackCtrl = new StackController(hasStack, elementRef.nativeElement, router, this.navCtrl);
    }
    Object.defineProperty(IonRouterOutlet.prototype, "animated", {
        set: function (animated) {
            this.elementRef.nativeElement.animated = animated;
        },
        enumerable: true,
        configurable: true
    });
    IonRouterOutlet.prototype.ngOnDestroy = function () {
        console.log('router-outlet destroyed');
        this.parentContexts.onChildOutletDestroyed(this.name);
    };
    IonRouterOutlet.prototype.getContext = function () {
        return this.parentContexts.getContext(this.name);
    };
    IonRouterOutlet.prototype.ngOnInit = function () {
        if (!this.activated) {
            // If the outlet was not instantiated at the time the route got activated we need to populate
            // the outlet when it is initialized (ie inside a NgIf)
            var context = this.getContext();
            if (context && context.route) {
                this.activateWith(context.route, context.resolver || null);
            }
        }
    };
    Object.defineProperty(IonRouterOutlet.prototype, "isActivated", {
        get: function () { return !!this.activated; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IonRouterOutlet.prototype, "component", {
        get: function () {
            if (!this.activated) {
                throw new Error('Outlet is not activated');
            }
            return this.activated.instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IonRouterOutlet.prototype, "activatedRoute", {
        get: function () {
            if (!this.activated) {
                throw new Error('Outlet is not activated');
            }
            return this._activatedRoute;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IonRouterOutlet.prototype, "activatedRouteData", {
        get: function () {
            if (this._activatedRoute) {
                return this._activatedRoute.snapshot.data;
            }
            return {};
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Called when the `RouteReuseStrategy` instructs to detach the subtree
     */
    IonRouterOutlet.prototype.detach = function () {
        throw new Error('incompatible reuse strategy');
    };
    /**
     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree
     */
    IonRouterOutlet.prototype.attach = function (_ref, _activatedRoute) {
        throw new Error('incompatible reuse strategy');
    };
    IonRouterOutlet.prototype.deactivate = function () {
        if (this.activated) {
            if (this.activatedView) {
                this.activatedView.savedData = new Map(this.getContext().children['contexts']);
            }
            var c = this.component;
            this.activatedView = null;
            this.activated = null;
            this._activatedRoute = null;
            this.deactivateEvents.emit(c);
        }
    };
    IonRouterOutlet.prototype.activateWith = function (activatedRoute, resolver) {
        var _this = this;
        if (this.isActivated) {
            throw new Error('Cannot activate an already activated outlet');
        }
        this._activatedRoute = activatedRoute;
        var cmpRef;
        var enteringView = this.stackCtrl.getExistingView(activatedRoute);
        if (enteringView) {
            cmpRef = this.activated = enteringView.ref;
            var saved = enteringView.savedData;
            if (saved) {
                // self-restore
                var context = this.getContext();
                context.children['contexts'] = saved;
            }
        }
        else {
            var snapshot = activatedRoute._futureSnapshot;
            var component = snapshot.routeConfig.component;
            resolver = resolver || this.resolver;
            var factory = resolver.resolveComponentFactory(component);
            var childContexts = this.parentContexts.getOrCreateContext(this.name).children;
            var injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);
            cmpRef = this.activated = this.location.createComponent(factory, this.location.length, injector);
            bindLifecycleEvents(cmpRef.instance, cmpRef.location.nativeElement);
            // Calling `markForCheck` to make sure we will run the change detection when the
            // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.
            this.changeDetector.markForCheck();
            enteringView = this.stackCtrl.createView(this.activated, activatedRoute);
        }
        var _a = this.navCtrl.consumeTransition(), direction = _a.direction, animated = _a.animated;
        this.activatedView = enteringView;
        this.stackCtrl.setActive(enteringView, direction, animated).then(function () {
            _this.activateEvents.emit(cmpRef.instance);
            emitEvent(_this.elementRef.nativeElement);
        });
    };
    IonRouterOutlet.prototype.canGoBack = function (deep) {
        if (deep === void 0) { deep = 1; }
        return this.stackCtrl.canGoBack(deep);
    };
    IonRouterOutlet.prototype.pop = function (deep) {
        if (deep === void 0) { deep = 1; }
        return this.stackCtrl.pop(deep);
    };
    IonRouterOutlet.decorators = [
        { type: Directive, args: [{
                    selector: 'ion-router-outlet',
                    exportAs: 'outlet'
                },] },
    ];
    /** @nocollapse */
    IonRouterOutlet.ctorParameters = function () { return [
        { type: ChildrenOutletContexts },
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver },
        { type: ElementRef },
        { type: String, decorators: [{ type: Attribute, args: ['name',] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Attribute, args: ['stack',] }] },
        { type: ChangeDetectorRef },
        { type: NavController },
        { type: Router }
    ]; };
    IonRouterOutlet.propDecorators = {
        activateEvents: [{ type: Output, args: ['activate',] }],
        deactivateEvents: [{ type: Output, args: ['deactivate',] }],
        animated: [{ type: Input }]
    };
    return IonRouterOutlet;
}());
export { IonRouterOutlet };
function emitEvent(el) {
    var ev = new CustomEvent('ionRouterOutletActivated', {
        bubbles: true,
        cancelable: true,
    });
    el.dispatchEvent(ev);
}
var OutletInjector = /** @class */ (function () {
    function OutletInjector(route, childContexts, parent) {
        this.route = route;
        this.childContexts = childContexts;
        this.parent = parent;
    }
    OutletInjector.prototype.get = function (token, notFoundValue) {
        if (token === ActivatedRoute) {
            return this.route;
        }
        if (token === ChildrenOutletContexts) {
            return this.childContexts;
        }
        // tslint:disable-next-line
        return this.parent.get(token, notFoundValue);
    };
    return OutletInjector;
}());
