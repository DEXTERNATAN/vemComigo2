var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var StackController = /** @class */ (function () {
    function StackController(stack, containerEl, router, navCtrl) {
        this.stack = stack;
        this.containerEl = containerEl;
        this.router = router;
        this.navCtrl = navCtrl;
        this.viewsSnapshot = [];
        this.views = [];
    }
    StackController.prototype.createView = function (enteringRef, route) {
        return {
            ref: enteringRef,
            element: (enteringRef && enteringRef.location && enteringRef.location.nativeElement),
            url: this.getUrl(route),
            fullpath: document.location.pathname,
            deactivatedId: -1
        };
    };
    StackController.prototype.getExistingView = function (activatedRoute) {
        var activatedUrlKey = this.getUrl(activatedRoute);
        return this.views.find(function (vw) { return vw.url === activatedUrlKey; });
    };
    StackController.prototype.canGoBack = function (deep) {
        return this.views.length > deep;
    };
    StackController.prototype.setActive = function (enteringView, direction, animated) {
        return __awaiter(this, void 0, void 0, function () {
            var leavingView;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        leavingView = this.getActive();
                        this.insertView(enteringView, direction);
                        return [4 /*yield*/, this.transition(enteringView, leavingView, direction, animated, this.canGoBack(1))];
                    case 1:
                        _a.sent();
                        this.cleanup();
                        return [2 /*return*/];
                }
            });
        });
    };
    StackController.prototype.pop = function (deep) {
        var view = this.views[this.views.length - deep - 1];
        this.navCtrl.goBack(view.url);
    };
    StackController.prototype.insertView = function (enteringView, direction) {
        // no stack
        if (!this.stack) {
            this.views = [enteringView];
            return;
        }
        // stack setRoot
        if (direction === 0) {
            this.views = [enteringView];
            return;
        }
        // stack
        var index = this.views.indexOf(enteringView);
        if (index >= 0) {
            this.views = this.views.slice(0, index + 1);
        }
        else {
            if (direction === 1) {
                this.views.push(enteringView);
            }
            else {
                this.views = [enteringView];
            }
        }
    };
    StackController.prototype.cleanup = function () {
        var views = this.views;
        this.viewsSnapshot
            .filter(function (view) { return !views.includes(view); })
            .forEach(function (view) { return destroyView(view); });
        for (var i = 0; i < views.length - 1; i++) {
            var view = views[i];
            var element = view.element;
            element.setAttribute('aria-hidden', 'true');
            element.classList.add('ion-page-hidden');
            // view.ref.changeDetectorRef.detach();
        }
        this.viewsSnapshot = views.slice();
    };
    StackController.prototype.getActive = function () {
        var views = this.views;
        return views.length > 0 ? views[views.length - 1] : undefined;
    };
    StackController.prototype.transition = function (enteringView, leavingView, direction, animated, showGoBack) {
        return __awaiter(this, void 0, void 0, function () {
            var enteringEl, leavingEl, containerEl;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        enteringEl = enteringView ? enteringView.element : undefined;
                        leavingEl = leavingView ? leavingView.element : undefined;
                        containerEl = this.containerEl;
                        if (!(enteringEl && enteringEl !== leavingEl)) return [3 /*break*/, 3];
                        enteringEl.classList.add('ion-page', 'ion-page-invisible');
                        containerEl.appendChild(enteringEl);
                        return [4 /*yield*/, containerEl.componentOnReady()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, containerEl.commit(enteringEl, leavingEl, {
                                duration: !animated ? 0 : undefined,
                                direction: direction === 1 ? 'forward' : 'back',
                                deepWait: true,
                                showGoBack: showGoBack
                            })];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    StackController.prototype.getUrl = function (activatedRoute) {
        var urlTree = this.router.createUrlTree(['.'], { relativeTo: activatedRoute });
        return this.router.serializeUrl(urlTree);
    };
    return StackController;
}());
export { StackController };
export function destroyView(view) {
    if (view) {
        // TODO lifecycle event
        view.ref.destroy();
    }
}
export function getLastDeactivatedRef(views) {
    if (views.length < 2) {
        return null;
    }
    return views.sort(function (a, b) {
        if (a.deactivatedId > b.deactivatedId)
            return -1;
        if (a.deactivatedId < b.deactivatedId)
            return 1;
        return 0;
    })[0].ref;
}
