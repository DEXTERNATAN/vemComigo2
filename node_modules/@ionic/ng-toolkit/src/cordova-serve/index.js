"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const cordova_build_1 = require("../cordova-build");
const { DevServerBuilder } = require('@angular-devkit/build-angular/src/dev-server'); // tslint:disable-line
class CordovaServeBuilder {
    constructor(context) {
        this.context = context;
    }
    run(builderConfig) {
        const [project, target, configuration] = builderConfig.options.devServerTarget.split(':');
        const { port, host, proxyConfig } = builderConfig.options;
        const devServerTargetSpec = { project, target, configuration, overrides: { port, host, proxyConfig } };
        const devServerBuilderConfig = this.context.architect.getBuilderConfiguration(devServerTargetSpec);
        // TODO: architect doesn't use the defaults from schema
        devServerBuilderConfig.options.watch = true;
        devServerBuilderConfig.options.liveReload = true;
        let devServerDescription;
        return this.context.architect.getBuilderDescription(devServerBuilderConfig).pipe(operators_1.tap(description => devServerDescription = description), operators_1.tap(() => this.context.architect.validateBuilderOptions(devServerBuilderConfig, devServerDescription)), operators_1.concatMap(() => rxjs_1.of(new CordovaDevServerBuilder(this.context, builderConfig.options))), 
        // concatMap(() => of(this.context.architect.getBuilder(devServerDescription, this.context))),
        operators_1.concatMap(builder => builder.run(devServerBuilderConfig)));
    }
}
exports.CordovaServeBuilder = CordovaServeBuilder;
class CordovaDevServerBuilder extends DevServerBuilder {
    constructor(context, cordovaServeOptions) {
        super(context);
        this.cordovaServeOptions = cordovaServeOptions;
    }
    // run(builderConfig: BuilderConfiguration</* DevServerBuilderOptions */any>): Observable<BuildEvent> {
    //   return super.run(builderConfig);
    // }
    buildWebpackConfig(root, projectRoot, host, browserOptions) {
        const { platform } = this.cordovaServeOptions;
        const [project, target, configuration] = this.cordovaServeOptions.cordovaBuildTarget.split(':');
        const cordovaBuildTargetSpec = { project, target, configuration, overrides: { platform } };
        const cordovaBuildTargetConfig = this.context.architect.getBuilderConfiguration(cordovaBuildTargetSpec);
        const builder = new cordova_build_1.CordovaBuildBuilder(this.context);
        builder.prepareBrowserConfig(cordovaBuildTargetConfig.options, browserOptions);
        return super.buildWebpackConfig(root, projectRoot, host, browserOptions);
    }
}
exports.default = CordovaServeBuilder;
