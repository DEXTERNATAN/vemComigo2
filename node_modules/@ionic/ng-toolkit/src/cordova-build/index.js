"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// https://github.com/angular/devkit/issues/963
const core_1 = require("@angular-devkit/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const { BrowserBuilder } = require('@angular-devkit/build-angular/src/browser'); // tslint:disable-line
class CordovaBuildBuilder {
    constructor(context) {
        this.context = context;
    }
    run(builderConfig) {
        const browserBuilder = new BrowserBuilder(this.context); // TODO: shouldn't this use `architect.getBuilder()`?
        return this.buildBrowserConfig(builderConfig.options).pipe(operators_1.concatMap(browserConfig => browserBuilder.run(browserConfig)));
    }
    buildBrowserConfig(options) {
        let browserConfig;
        return rxjs_1.of(null).pipe(// tslint:disable-line:no-null-keyword
        operators_1.concatMap(() => this._getBrowserConfig(options)), operators_1.tap(config => browserConfig = config), operators_1.tap(() => this.prepareBrowserConfig(options, browserConfig.options)), operators_1.concatMap(() => rxjs_1.of(browserConfig)));
    }
    // Mutates browserOptions
    prepareBrowserConfig(options, browserOptions) {
        const cordovaBasePath = core_1.normalize(options.cordovaBasePath ? options.cordovaBasePath : '.');
        // We always need to output the build to `www` because it is a hard
        // requirement of Cordova.
        browserOptions.outputPath = core_1.join(cordovaBasePath, core_1.normalize('www'));
        const platformWWWPath = core_1.join(cordovaBasePath, core_1.normalize(`platforms/${options.platform}/platform_www`));
        // Add Cordova www assets that were generated whenever platform(s) and
        // plugin(s) are added. This includes `cordova.js`,
        // `cordova_plugins.js`, and all plugin JS.
        browserOptions.assets.push({
            glob: '**/*',
            input: core_1.getSystemPath(platformWWWPath),
            output: './',
        });
        // Register `cordova.js` as a global script so it is included in
        // `index.html`.
        browserOptions.scripts.push({
            input: core_1.getSystemPath(core_1.join(platformWWWPath, core_1.normalize('cordova.js'))),
            bundleName: 'cordova',
        });
    }
    _getBrowserConfig(options) {
        const { architect } = this.context;
        const [project, target, configuration] = options.browserTarget.split(':');
        const browserTargetSpec = { project, target, configuration, overrides: {} };
        const builderConfig = architect.getBuilderConfiguration(browserTargetSpec);
        return architect.getBuilderDescription(builderConfig).pipe(operators_1.concatMap(browserDescription => architect.validateBuilderOptions(builderConfig, browserDescription)));
    }
}
exports.CordovaBuildBuilder = CordovaBuildBuilder;
exports.default = CordovaBuildBuilder;
